{"version":3,"sources":["firebase.js","FormToggle.js","PrintDisplay.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FormToggle","handleImageChange","e","setState","imgFile","target","files","imgSrc","URL","createObjectURL","revokeObjectURL","deferred","props","fromPapa","handleFormSubmit","emptyState","state","charName","charClass","charLvl","charJournal","charInventory","imageUrlInput","console","log","handleChange","name","value","isHidden","this","id","action","onSubmit","char","showImage","htmlFor","type","onChange","min","max","src","alt","width","className","Component","PrintDisplay","charObject","App","userInput","preventDefault","dbRef","database","ref","push","addCharacter","characterKey","child","showForm","showNewCharForm","displayInfo","key","characterToShow","newCharacter","filter","item","showDisplayInfo","showCharacter","removeChar","remove","test","on","response","newState","data","val","characterInfo","href","onClick","map","character","index","font-size","displayParent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d251f08.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyALhgjyO_nxgg9Do-nH9CGwMvOE-9p4FyE\",\r\n    authDomain: \"lucas-nemeth-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://lucas-nemeth-project-5.firebaseio.com\",\r\n    projectId: \"lucas-nemeth-project-5\",\r\n    storageBucket: \"lucas-nemeth-project-5.appspot.com\",\r\n    messagingSenderId: \"656764515209\",\r\n    appId: \"1:656764515209:web:e31e6147109ecfc0502758\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\n\r\n\r\nclass FormToggle extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            isHidden: true\r\n\r\n        }\r\n    }\r\n    toggleHidden() {\r\n        this.setState({\r\n            isHidden: !this.state.isHidden\r\n        })\r\n    }\r\n\r\n    handleImageChange = (e) => {\r\n        // const imageToShow = this.state.imageUrlInput.filter(item => item.key === key)\r\n        this.setState({\r\n            imgFile: e.target.files[0],\r\n            imgSrc: URL.createObjectURL(e.target.files[0]),\r\n            // showImage:imageToShow\r\n        });\r\n        \r\n        URL.revokeObjectURL(e.target.files[0]); //to avoid memory issues\r\n        \r\n    }\r\n    \r\n\r\n    deferred = (e) => {this.props.fromPapa(e, this.props.handleFormSubmit)}\r\n    \r\n    emptyState = (e) =>{\r\n        this.props.fromPapa(e, this.state)\r\n        this.setState({\r\n            charName: '',\r\n            charClass: '',\r\n            charLvl: '',\r\n            charJournal: '',\r\n            charInventory:'',\r\n            imageUrlInput: ''\r\n        })\r\n        console.log(this.state)\r\n        // this.setState = \r\n    }\r\n\r\n    handleChange = (e) => {   //added user input\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        console.log(e.target.name)\r\n        // this.setState({ [e.charClass.name]: e.charClass.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            < div >\r\n                <form \r\n                    id=\"charForm\" \r\n                    action=\"submit\" \r\n                    onSubmit={this.emptyState}\r\n                    char={this.state.showImage}\r\n                    >  {/* adding a state */}\r\n\r\n                    <label htmlFor=\"charName\">Name: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"charName\"\r\n                        name=\"charName\"\r\n                        onChange={this.handleChange}\r\n                        // onChange={this.props.fromChangeParent}\r\n                        value={this.state.charName}\r\n                    />\r\n                    <label htmlFor=\"charClass\">Class: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"charClass\"\r\n                        name=\"charClass\"\r\n                        onChange={this.handleChange}\r\n                        // onChange={this.props.fromChangeParent}\r\n                        value={this.state.charClass}\r\n                    />\r\n                    <label htmlFor=\"charLvl\">Level: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        id=\"charLvl\"\r\n                        name=\"charLvl\"\r\n                        min=\"1\"\r\n                        max=\"20\"\r\n                        onChange={this.handleChange}\r\n                        // onChange={this.props.fromChangeParent}\r\n                        value={this.state.charLvl}\r\n                    />\r\n                    <label htmlFor=\"charInventory\">Inventory: </label>\r\n                    <textarea \r\n                        name=\"charInventory\" \r\n                        id=\"charInventory\" \r\n                        onChange={this.handleChange} \r\n                        value={this.state.charInventory}\r\n                    />\r\n                    <label htmlFor=\"charJournal\">Current Quest: </label>\r\n                    <textarea\r\n                        id=\"charJournal\"\r\n                        name=\"charJournal\"\r\n                        // onChange={this.props.fromChangeParent}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.charJournal}\r\n                    />\r\n                    <label htmlFor=\"imageUrlInput\">Character Portrait URL:</label>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"imageUrlInput\" \r\n                        id=\"imageUrlInput\" \r\n                        onChange={this.handleChange} \r\n                        // onChange={this.props.fromChangeParent}\r\n                        value={this.state.imageUrlInput}\r\n                    />\r\n                    <img src={this.state.imgSrc} alt=\"\" width=\"300px\" />\r\n\r\n                    <button className=\"submit\" type=\"submit\">Submit</button>\r\n                </form>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormToggle;","import React, { Component } from 'react';\r\n\r\n//\r\n\r\nclass PrintDisplay extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            isHidden:true,\r\n            charObject:''\r\n        }\r\n    }\r\n    toggleInfoHidden() {\r\n        this.setState({\r\n            isHidden: !this.state.isHidden\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { name } = this.props.char[0];\r\n        console.log(name)\r\n        return (\r\n            <div className=\"display\">\r\n                <ul className=\"displayList\">\r\n                    {/* <li><img src={this.state.imgUrlInput} alt=\"\" /></li> */}\r\n                    <li><h3>Name: {name.charName}</h3></li>\r\n                    <li><h3>Class: {name.charClass}</h3></li>\r\n                    <li><h3>Level: {name.charLvl}</h3></li>\r\n                    <li><h3>Current Quest: {name.charJournal}</h3></li>\r\n                    <li><h3>Equipment: {name.charInventory}</h3></li>\r\n\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PrintDisplay;\r\n\r\n//we'll toggle this. have it display nothing by default until a click of createdChar button.\r\n\r\n//on click we'll need to populate this with the setstate of whatever info within the  button that was clicked","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport FormToggle from './FormToggle.js';\nimport PrintDisplay from './PrintDisplay.js'\n// import Granim from 'react-granim';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nimport './App.css';\n//----------------------Constructor Start--------------------//\nclass App extends Component {\n  constructor(){\n    super();\n\n    // const gradient = new Granim({\n    //   element: '#canvas-basic',\n    //   direction: 'top-bottom',\n    //   isPausedWhenNotInView: true,\n    //   states: {\n    //     \"default-state\": {\n    //       gradients: [\n    //         ['#111111', '#003300'],\n    //         ['#000000', '#004800'],\n    //         ['#111111', '#00ce00']\n    //       ]\n    //     }\n    //   }\n      \n    // });\n    \n    this.state={\n      newCharacter:[],\n      charName:'',\n      charClass:'',\n      charLvl:'',\n      imageUrlInput:'',\n      showNewCharForm:false,\n      showDisplayInfo:false,\n      test: [],\n      \n    }\n  }\n  \n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) =>{\n      const newState = [];\n      const data = response.val();\n\n\n      for (let key in data){\n        const characterInfo={\n          key:key,\n          name:data[key]\n        }\n        // newState.push(data[key]);\n        newState.push(characterInfo)\n      }\n      this.setState({\n        newCharacter: newState\n      });\n    })\n\n  }\n\n//--------------------------Event prevent default--------------------------//\n\n  handleFormSubmit = (e, userInput) => {\n    e.preventDefault();\n\n    console.log('hi')\n\n    const dbRef = firebase.database().ref();\n    const charObject = {\n      charName: userInput.charName,\n      charClass: userInput.charClass,\n      charLvl: userInput.charLvl,\n      charJournal: userInput.charJournal,\n      imageUrlInput: userInput.imageUrlInput,\n      charInventory: userInput.charInventory\n    }\n\n\n    dbRef.push(charObject);\n    console.log(charObject)\n\n    this.setState({\n      charName: userInput.charName,\n      charClass: userInput.charClass,\n      charLvl: userInput.charLvl,\n      charJournal: userInput.charJournal,\n      imageUrlInput: userInput.imageUrlInput,\n      charInventory: userInput.charInventory\n    })\n    console.log(this.state)\n  }\n\n  addCharacter =(characterKey)=>{\n    const dbRef = firebase.database().ref()\n    dbRef.child(characterKey).push();\n    console.log(this.state.addCharacter)\n  }\n\n  showForm = (e) =>{\n    e.preventDefault();\n    this.setState({showNewCharForm:true})\n  }\n  \n  displayInfo = (key) => {\n    const characterToShow = this.state.newCharacter.filter(item => item.key === key)\n    this.setState({\n      showDisplayInfo:true,\n      showCharacter: characterToShow,\n    })\n  }\n\n//-----------------------removing character-------------------------//\n  removeChar = (characterKey) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(characterKey).remove();\n  }\n//---------------------------render-------------------------------//\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          \n          <div className=\"wrapper\">\n            <h1>Adventure Base</h1>\n          </div>\n        </header>\n\n        <main>\n          <div className=\"wrapper\">\n            <h2>My Characters</h2>\n            <ul>\n              {/* {this.state.newCharacter.map((character, index)=>{\n                return ( */}\n                  <div className=\"charContainer\">\n                    <li >\n                      <a href=\"\">\n                        <div className=\"charButtons\">\n                          <button className=\"newCharButton\" onClick={\n                            this.showForm\n                          }>\n                            <i className=\"fa fa-plus-square\"></i>\n                          </button>\n                        </div>\n                      </a>\n                    </li>\n                  </div>\n                {this.state.newCharacter.map((character, index) => {\n                  console.log(character.key)\n                  return (\n                    <div key={index}>\n                      <li >\n                        <a>\n                          <div className=\"createdChar\">\n                            <button \n                              className=\"createdCharButton\" \n                              onClick={(e) => this.displayInfo(character.key)}\n                              >\n                              <div className=\"imgContain\">\n                                <i className=\"fa fa-user-circle\" font-size=\"5rem\"></i>\n                              </div>\n                            </button>\n                            <button className=\"deleteButton\" onClick={() => { this.removeChar(character.key) }}>delete</button>\n\n                          </div>\n                        </a>\n                      </li>\n                      \n                    </div>\n                    \n                )\n              })}\n            </ul>\n            {/* <FormToggle fromPapa={this.handleFormSubmit} /> */}\n            {this.state.showDisplayInfo ?\n              <PrintDisplay\n                displayParent={this.displayInfo}\n                char={this.state.showCharacter}\n              />\n              : null}\n            {this.state.showNewCharForm ? \n              <FormToggle \n                fromPapa={this.handleFormSubmit} \n                // fromChangeParent={this.handleChange} \n              /> \n              : null}\n            \n          </div>\n        </main>\n        {/* <Granim id=\"granim\"></Granim> */}\n      </div>\n      \n    );\n  }\n}\n  \n\nexport default App;\n\n\n// To-Do:\n\n//handleSubmitFunction data must be passed to the Child in FormToggle. \n\n// store the input data into the character buttons\n  //on click of character buttons, bring up the info that's been inputed. \n\n// Have avatar images/ something to identify a made character. ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}