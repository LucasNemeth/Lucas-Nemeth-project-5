{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleFormSubmit","e","preventDefault","dbRef","database","ref","charObject","charName","state","charClass","charLvl","push","console","log","setState","addCharacter","characterKey","child","newCharacter","handleChange","bind","on","response","newState","data","val","key","characterInfo","name","this","target","value","className","map","character","index","href","onClick","action","onSubmit","htmlFor","type","id","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mWAaAA,IAASC,cAVY,CACjBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,EC6HeS,G,8BApIb,aAAc,IAAD,8BACX,+CAyCFC,iBAAmB,SAACC,GAClBA,EAAEC,iBAEF,IAAMC,EAAQb,EAASc,WAAWC,MAC5BC,EAAW,CACfC,SAAS,EAAKC,MAAMD,SACpBE,UAAU,EAAKD,MAAMC,UACrBC,QAAQ,EAAKF,MAAME,SAIrBP,EAAMQ,KAAKL,GACXM,QAAQC,IAAIP,GAEZ,EAAKQ,SAAS,CACZP,SAAU,GACVE,UAAU,MA1DD,EA8DbM,aAAc,SAACC,GACC1B,EAASc,WAAWC,MAC5BY,MAAMD,GAAcL,QA7D1B,EAAKH,MAAM,CACTU,aAAa,GACbX,SAAS,GACTE,UAAU,IAGZ,EAAKU,aAAa,EAAKA,aAAaC,KAAlB,gBATP,E,iFAYO,IAAD,OACXjB,EAAQb,EAASc,WAAWC,MAElCF,EAAMkB,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAW,GACXC,EAAOF,EAASG,MAEtB,IAAK,IAAIC,KAAOF,EAAK,CACnB,IAAMG,EAAc,CAClBD,IAAIA,EACJE,KAAKJ,EAAKE,IAGZH,EAASZ,KAAKgB,GAEhB,EAAKb,SAAS,CACZI,aAAcK,OAIlBpB,EAAMkB,GAAG,SAAS,SAACC,S,mCAKRrB,GACX4B,KAAKf,SAAL,eAAgBb,EAAE6B,OAAOF,KAAM3B,EAAE6B,OAAOC,U,+BA8BhC,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,gCACE,yBAAKA,UAAU,WACb,gDAGJ,8BACE,yBAAKA,UAAU,WACb,6CACA,4BACGH,KAAKrB,MAAMU,aAAae,KAAI,SAACC,EAAWC,GACvC,OACE,wBAAIT,IAAKS,GACP,uBAAGC,KAAK,IACN,4BAAQJ,UAAU,gBAAgBK,QAAS,SAACpC,GAC1C,EAAKc,aAAamB,EAAUR,KAC5BzB,EAAEC,mBAEF,uBAAG8B,UAAU,6BAOzB,6BACE,0BAAMM,OAAO,SAASC,SAAUV,KAAK7B,kBACnC,2BAAOwC,QAAQ,YAAf,UACA,2BACEC,KAAK,OACLC,GAAG,WACHd,KAAK,WACLe,SAAUd,KAAKV,aACfY,MAAOF,KAAKrB,MAAMD,WAEpB,2BAAOiC,QAAQ,aAAf,WACA,2BACEC,KAAK,OACLC,GAAG,YACHd,KAAK,YACLe,SAAUd,KAAKV,aACfY,MAAOF,KAAKrB,MAAMC,YAEpB,2BAAO+B,QAAQ,WAAf,WACA,2BACEC,KAAK,OACLC,GAAG,UACHd,KAAK,UACLe,SAAUd,KAAKV,aACfY,MAAOF,KAAKrB,MAAME,UAEpB,4BAAQ+B,KAAK,UAAb,mB,GA1HEG,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.0acc8349.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyALhgjyO_nxgg9Do-nH9CGwMvOE-9p4FyE\",\r\n    authDomain: \"lucas-nemeth-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://lucas-nemeth-project-5.firebaseio.com\",\r\n    projectId: \"lucas-nemeth-project-5\",\r\n    storageBucket: \"lucas-nemeth-project-5.appspot.com\",\r\n    messagingSenderId: \"656764515209\",\r\n    appId: \"1:656764515209:web:e31e6147109ecfc0502758\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport 'font-awesome/css/font-awesome.min.css';\nimport GoogleFontLoader from './GoogleFontLoader.js';\n\nimport './App.css';\n//----------------------Constructor Start--------------------//\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      newCharacter:[],\n      charName:'',\n      charClass:'',\n      \n    }\n    this.handleChange=this.handleChange.bind(this);\n  }\n  \n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) =>{\n      const newState = [];\n      const data = response.val();\n\n      for (let key in data){\n        const characterInfo={\n          key:key,\n          name:data[key]\n        }\n        // newState.push(data[key]);\n        newState.push(characterInfo)\n      }\n      this.setState({\n        newCharacter: newState\n      });\n    })\n\n    dbRef.on('value', (response) => {\n\n    });\n  }\n\n  handleChange(e){\n    this.setState({[e.target.name]:e.target.value});\n    // this.setState({ [e.charClass.name]: e.charClass.value });\n  }\n//--------------------------Event prevent default--------------------------//\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    const dbRef = firebase.database().ref();\n    const charObject={\n      charName:this.state.charName,\n      charClass:this.state.charClass,\n      charLvl:this.state.charLvl,\n    }\n\n\n    dbRef.push(charObject);\n    console.log(charObject)\n\n    this.setState({\n      charName: '',\n      charClass:'',\n    })\n  }\n\n  addCharacter =(characterKey)=>{\n    const dbRef = firebase.database().ref()\n    dbRef.child(characterKey).push();\n  }\n\n//---------------------------render-------------------------------//\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <h1>Adventure Base</h1>\n          </div>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            <h2>My Characters</h2>\n            <ul>\n              {this.state.newCharacter.map((character, index)=>{\n                return (\n                  <li key={index}>\n                    <a href=\"\">\n                      <button className=\"newCharButton\" onClick={(e)=>{\n                        this.addCharacter(character.key)\n                        e.preventDefault()\n                        }}>\n                        <i className=\"fa fa-plus-square\"></i>\n                      </button>\n                    </a>\n                  </li>\n                )\n              })}\n            </ul>\n            <div>\n              <form action=\"submit\" onSubmit={this.handleFormSubmit}>\n                <label htmlFor=\"charName\">Name: </label>\n                <input\n                  type=\"text\"\n                  id=\"charName\"\n                  name=\"charName\"\n                  onChange={this.handleChange}\n                  value={this.state.charName}\n                />\n                <label htmlFor=\"charClass\">Class: </label>\n                <input\n                  type=\"text\"\n                  id=\"charClass\"\n                  name=\"charClass\"\n                  onChange={this.handleChange}\n                  value={this.state.charClass}\n                  />\n                <label htmlFor=\"charLvl\">Level: </label>\n                <input\n                  type=\"text\"\n                  id=\"charLvl\"\n                  name=\"charLvl\"\n                  onChange={this.handleChange}\n                  value={this.state.charLvl}\n                />\n                <button type=\"submit\">Submit</button>\n              </form>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}