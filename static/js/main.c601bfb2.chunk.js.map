{"version":3,"sources":["firebase.js","FormToggle.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FormToggle","deferred","e","props","fromPapa","handleFormSubmit","state","isHidden","this","setState","id","action","onSubmit","htmlFor","type","name","onChange","fromChangeParent","value","charName","charClass","charLvl","charJournal","Component","App","handleChange","target","preventDefault","console","log","dbRef","database","ref","charObject","push","addCharacter","characterKey","child","showForm","showNewCharForm","removeChar","remove","newCharacter","on","response","newState","data","val","key","characterInfo","className","href","onClick","map","character","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c601bfb2.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyALhgjyO_nxgg9Do-nH9CGwMvOE-9p4FyE\",\r\n    authDomain: \"lucas-nemeth-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://lucas-nemeth-project-5.firebaseio.com\",\r\n    projectId: \"lucas-nemeth-project-5\",\r\n    storageBucket: \"lucas-nemeth-project-5.appspot.com\",\r\n    messagingSenderId: \"656764515209\",\r\n    appId: \"1:656764515209:web:e31e6147109ecfc0502758\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\n\r\n\r\nclass FormToggle extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            isHidden: true\r\n        }\r\n    }\r\n    toggleHidden() {\r\n        this.setState({\r\n            isHidden: !this.state.isHidden\r\n        })\r\n    }\r\n\r\n    deferred = (e) => {this.props.fromPapa(e, this.props.handleFormSubmit)}\r\n    \r\n\r\n    render() {\r\n        return (\r\n            < div >\r\n                <form id=\"charForm\" action=\"submit\" onSubmit={this.props.fromPapa}>\r\n\r\n                    <label htmlFor=\"charName\">Name: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"charName\"\r\n                        name=\"charName\"\r\n                        onChange={this.props.fromChangeParent}\r\n                        value={this.state.charName}\r\n                    />\r\n                    <label htmlFor=\"charClass\">Class: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"charClass\"\r\n                        name=\"charClass\"\r\n                        onChange={this.props.fromChangeParent}\r\n                        value={this.state.charClass}\r\n                    />\r\n                    <label htmlFor=\"charLvl\">Level: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"charLvl\"\r\n                        name=\"charLvl\"\r\n                        onChange={this.props.fromChangeParent}\r\n                        value={this.state.charLvl}\r\n                    />\r\n                    <label htmlFor=\"charJournal\">Current Quest: </label>\r\n                    <textarea\r\n                        id=\"charJournal\"\r\n                        name=\"charJournal\"\r\n                        onChange={this.props.fromChangeParent}\r\n                        value={this.state.charJournal}\r\n                    />\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormToggle;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport FormToggle from './FormToggle.js'\nimport 'font-awesome/css/font-awesome.min.css';\nimport GoogleFontLoader from './GoogleFontLoader.js';\n\nimport './App.css';\n//----------------------Constructor Start--------------------//\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      newCharacter:[],\n      charName:'',\n      charClass:'',\n      charLvl:'',\n      showNewCharForm:false\n      \n    }\n    // this.handleChange=this.handleChange.bind(this);   \n    // this.handleChange=()=>{\n    //   this.handleChange(this);\n    // }\n  }\n  \n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) =>{\n      const newState = [];\n      const data = response.val();\n\n\n      for (let key in data){\n        const characterInfo={\n          key:key,\n          name:data[key]\n        }\n        // newState.push(data[key]);\n        newState.push(characterInfo)\n      }\n      this.setState({\n        newCharacter: newState\n      });\n    })\n\n    dbRef.on('value', (response) => {\n      console.log(dbRef)\n    });\n  }\n\n  handleChange=(e)=>{\n    this.setState({[e.target.name]:e.target.value});\n    // this.setState({ [e.charClass.name]: e.charClass.value });\n  }\n//--------------------------Event prevent default--------------------------//\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    console.log('hi')\n\n    const dbRef = firebase.database().ref();\n    const charObject={\n      charName:this.state.charName,\n      charClass:this.state.charClass,\n      charLvl:this.state.charLvl,\n      charJournal:this.state.charJournal,\n    }\n\n    dbRef.push(charObject);\n    console.log(charObject)\n\n    this.setState({\n      charName: '',\n      charClass:'',\n      charLvl:'',\n      charJournal:'',\n    })\n  }\n\n  addCharacter =(characterKey)=>{\n    const dbRef = firebase.database().ref()\n    dbRef.child(characterKey).push();\n    console.log(this.state.addCharacter)\n  }\n\n  showForm = (e) =>{\n    e.preventDefault();\n    this.setState({showNewCharForm:true})\n    console.log('showForm clicked')\n  }\n  \n\n//-----------------------removing character-------------------------//\n  removeChar = (characterKey) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(characterKey).remove();\n  }\n//---------------------------render-------------------------------//\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <h1>Adventure Base</h1>\n          </div>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            <h2>My Characters</h2>\n            <ul>\n              {/* {this.state.newCharacter.map((character, index)=>{\n                return ( */}\n                  <div className=\"charContainer\">\n                    <li >\n                      <a href=\"\">\n                        <div className=\"charButtons\">\n                          <button className=\"newCharButton\" onClick={\n                            this.showForm\n                          }>\n                            <i className=\"fa fa-plus-square\"></i>\n                          </button>\n                        </div>\n                      </a>\n                    </li>\n                  </div>\n                {this.state.newCharacter.map((character, index) => {\n                  return (\n                    <div>\n                      <li key={index}>\n                        <a>\n                          <div className=\"createdChar\">\n                            <button className=\"createdCharButton\">\n                              <i className=\"fa fa-head-side\"></i>\n                            </button>\n                            <button className=\"deleteButton\" onClick={() => { this.removeChar(character.key) }}>delete</button>\n\n                          </div>\n                        </a>\n                      </li>\n                    </div>\n                )\n              })}\n            </ul>\n            {/* <FormToggle fromPapa={this.handleFormSubmit} /> */}\n            {this.state.showNewCharForm ? <FormToggle fromPapa={this.handleFormSubmit} fromChangeParent={this.handleChange} /> : null}\n            \n            \n          \n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n  \n\nexport default App;\n\n\n// To-Do:\n\n//handleSubmitFunction data must be passed to the Child in FormToggle. \n\n// store the input data into the character buttons\n  //on click of character buttons, bring up the info that's been inputed. \n\n// Have avatar images/ something to identify a made character. ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}